class ListNode {
    int val;
    ListNode next;

    ListNode(int x) { 
        val = x; 
        next = null; 
    }

   
    public static ListNode deserialize(String data) {
        if (data == null || data.length() == 0 || data.equals("[]")) {
            return null;
        }

        String[] values = data.replaceAll("[\\[\\] ]", "").split(",");
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        for (String value : values) {
            if (!value.isEmpty()) {
                current.next = new ListNode(Integer.parseInt(value));
                current = current.next;
            }
        }

        return dummy.next; // Return the head of the constructed list
    }
}

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;

        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }

        if (l1 != null) {
            current.next = l1;
        } else {
            current.next = l2;
        }

        return dummy.next;
    }
}

public class Driver {
    public static void main(String[] args) {
       
        String list1Data = "[1,2,4]";
        String list2Data = "[1,3,4]";

        
        ListNode l1 = ListNode.deserialize(list1Data);
        ListNode l2 = ListNode.deserialize(list2Data);

      
        Solution solution = new Solution();
        ListNode mergedList = solution.mergeTwoLists(l1, l2);

       
        ListNode current = mergedList;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
    }
}
